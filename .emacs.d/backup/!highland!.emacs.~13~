(defun doodlebug ()                                                           
 "Nonce function"                                                             
 (interactive)                                                                
 (message "Howdie-doodie fella")) 

;;; Cache password for tramp remote sessions
(setq password-cache-expiry nil)

(defun prev-window ()
   (interactive)
   (other-window -1))

 (define-key global-map (kbd "C-x p") 'prev-window)

;; ===== Enable mouse support ====
                                       
(require 'xt-mouse)                   
(xterm-mouse-mode)

;;; Copy-paste to/from emacs
(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)

(defun copy-to-x-clipboard ()
  (interactive)
  (if (region-active-p)
    (progn
     ; my clipboard manager only intercept CLIPBOARD
      (shell-command-on-region (region-beginning) (region-end)
        (cond
         ((eq system-type 'cygwin) "putclip")
         ((eq system-type 'darwin) "pbcopy")
         (t "xsel -ib")
         )
        )
      (message "Yanked region to clipboard!")
      (deactivate-mark))
    (message "No region active; can't yank to clipboard!")))

(defalias 'cpx 'copy-to-x-clipboard)
(defalias 'rb 'revert-buffer)

(defun paste-from-x-clipboard()
  (interactive)
  (shell-command
   (cond
    ((eq system-type 'cygwin) "getclip")
    ((eq system-type 'darwin) "pbpaste")
    (t "xsel -ob")
    )
   1)
  )

;;;------------------------------------------------------------------------   
;;; Provide a version of Emacs 24's 'string-prefix-p in older emacs
;;;------------------------------------------------------------------------   
;; (unless (fboundp 'string-prefix-p)                                            
;;   (defun string-prefix-p (shorter longer)                                     
;;     (let ((n (mismatch shorter longer))                                       
;;          (l (length shorter)))                                                
;;       (if (or (not n) (= n l)) l nil))))                                      
                                                                              
;;; Fix junk characters in shell-mode
(add-hook 'shell-mode-hook 
          'ansi-color-for-comint-mode-on)

;;; Use iswitchb to switch buffers
;;; (iswitchb-mode 1)

;;; Use ido to switch buffers
(setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

;;; Automatically save session when quit
(desktop-save-mode 1)

(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (let (el-get-master-branch)
      (goto-char (point-max))
      (eval-print-last-sexp))))
(el-get 'sync)


;;; This was installed by package-install.el.
;;; This provides support for the package system and
;;; interfacing with ELPA, the package archive.
;;; Move this code earlier if you want to reference
;;; packages in your .emacs.
(when
    (load
     (expand-file-name "~/.emacs.d/elpa/package.el"))
  (package-initialize))

(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:setup-keys t)                      ; optional
(setq jedi:complete-on-dot t)                 ; optional
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(jira-url "https://jira.corp.skytap.com/rpc/xmlrpc")
 '(menu-bar-mode nil)
 '(python-remove-cwd-from-path nil)
 '(safe-local-variable-values (quote ((prompt-to-byte-compile))))
 '(uniquify-buffer-name-style (quote forward) nil (uniquify)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;; To allow mysql mode to accept blank password
(setq sql-user "root")
(setq sql-password nil)


;;; To show full file path in in emacs window
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

;;; Copy full file name to kill ring
(defun copy-buffer-file-name ()
  "Copy the full file path of the current buffer to the kill ring."
  (interactive)
  (let ((fn buffer-file-name))
    (message fn)
    (if fn
	(progn (message fn) (kill-new (file-truename fn))
	)
      (message "There is no file associated with the current buffer")))
)

(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))


(defun revert-all-buffers ()
          "Refreshes all open buffers from their respective files"
          (interactive)
          (let* ((list (buffer-list))
                 (buffer (car list)))
            (while buffer
              (when (and (buffer-file-name buffer) 
                         (not (buffer-modified-p buffer)))
                (set-buffer buffer)
                (revert-buffer t t t))
              (setq list (cdr list))
              (setq buffer (car list))))
          (message "Refreshed open files"))

(defun pdb-pm ()  
      "add pdb post-mortem and move line down"  
    (interactive)  
    (move-beginning-of-line 1)  
    (insert "import pdb; pdb.post_mortem(sys.exc_info()[2]);\n"))

(defun python-insert-pause ()  
      "add a pause in Python program"  
    (interactive)  
    (insert "print 'press [ENTER] to continue:', sys.stdin.readline(); print"))

(defun python-insert-sql-echo ()  
      "add SQL echo to SQL alchemy "  
    (interactive)  
    (insert "sql_echo=True"))

(defun python-outline()
  "Display class and function definitions"
  (interactive)
  (occur "^\\(\\s-*def\\s-+\\)\\|\\(\\s-*class\\s-*\\)"))

;; Load mercurial.el
;; (add-to-list 'load-path "~/.emacs.d/mercurial/")
;; (require 'mercurial "mercurial.el")

;; Display column number
(setq column-number-mode t)

;; C-M-% is impossible for me
(defalias 'qrr 'query-replace-regexp)

; (require 'jira)

;;; org-jira mode
(add-to-list 'load-path "~/.emacs.d/org-jira/")
(setq jiralib-url "https://jira.corp.skytap.com") 
(require 'org-jira) 

;;; Make S-tab for org-mode works over terminal
(define-key function-key-map "\e[Z" [backtab])

;;; Set back up file location
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )

(defun json-format ()
  (interactive)
  (save-excursion
    (shell-command-on-region (mark) (point) "python -m json.tool" (buffer-name) t)
    )
)
(put 'downcase-region 'disabled nil)

;;; Show unique buffer name
(require 'uniquify)

;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun semnav-up (arg)
  (interactive "p")
  (when (nth 3 (syntax-ppss))
    (if (> arg 0)
        (progn
          (skip-syntax-forward "^\"")
          (goto-char (1+ (point)))
          (decf arg))
      (skip-syntax-backward "^\"")
      (goto-char (1- (point)))
      (incf arg)))
  (up-list arg))

;; by Nikolaj Schumacher, 2008-10-20. Released under GPL.
(defun extend-selection (arg &optional incremental)
  "Select the current word.
Subsequent calls expands the selection to larger semantic unit."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     (or (region-active-p)
                         (eq last-command this-command))))
  (if incremental
      (progn
        (semnav-up (- arg))
        (forward-sexp)
        (mark-sexp -1))
    (if (> arg 1)
        (extend-selection (1- arg) t)
      (if (looking-at "\\=\\(\\s_\\|\\sw\\)*\\_>")
          (goto-char (match-end 0))
        (unless (memq (char-before) '(?\) ?\"))
          (forward-sexp)))
      (mark-sexp -1))))

(global-set-key (kbd "M-8") 'extend-selection)

;;; ------------------------------
;;; skycap shortcuts
;;; ------------------------------
(defun skycap-upgrade (svc)  
      "Insert command to upgrade skytap services and configurations"  
    (interactive
       (list
	(completing-read "Service name: " '("control_host" "greenbox" "configuration_manager"))))
    (insert (format "skycap svc:%s:upgrade" svc)))

(defun skycap-puppetize  
      "Insert command to puppetize stack"  
    (interactive)
    (insert "skycap svc:control_host:puppetize"))

(defun skycap-cron-status (svc)  
      "Insert command to check the status of cron job"  
    (interactive
       (list
	(completing-read "Service name: " '("system_test" "system_test_cleanup" "system_test_performance"))))
    (insert (format "skycap svc:%s:cron_status" svc)))

(defun skycap-cron-install (svc)  
      "Insert command to install cron job"  
    (interactive
       (list
	(completing-read "Service name: " '("system_test" "system_test_cleanup" "system_test_performance"))))
    (insert (format "skycap svc:%s:install_cron" svc)))

(defun skycap-cron-remove (svc)  
      "Insert command to remove cron job"  
    (interactive
       (list
	(completing-read "Service name: " '("system_test" "system_test_cleanup" "system_test_performance"))))
    (insert (format "skycap svc:%s:remove_cron" svc)))

;;; -----------------------------
;;; MySQL queries
;;; -----------------------------
(defun mysql-query-account-resources (account-id)  
      "Insert command that queries all resource ids allocated to an account"  
    (interactive "sAccount ID(quota pool id): ")  
    (insert (format "select r.object_key from accounting.resources as r, accounting.quota_pool_charge_tag_map as q where q.quota_pool_id='%s' and r.charge_tag = q.charge_tag;" account-id)))

(defun mysql-query-account-datacenters (account-id)  
      "Insert command that queries all datacenters created for an account"  
    (interactive "sAccount ID: ")  
    (insert (format "select * from greenbox.datacenters natural left join greenbox.resources where account_key = '%s'\\G;" account-id)))

(defun mysql-query-greenbox-messages ()  
      "Insert command that queries pending greenbox messages"  
    (interactive)  
    (insert "select request_reply_seed, action, sent_time, reply_time from greenbox.messages order by message_id desc limit 10\\G;"))


;;; -----------------------------
;;; Shells
;;; -----------------------------
(defun shell-integ (buffer-name)
  "Shell of integ"
    (interactive "sBuffer name: integ-")  
    (eshell-command (format "pushd . & cd /ssh:root@sea5m1logger1.mgt.integ.skytap.com: & shell integ-%s & popd" buffer-name)))

(defun shell-integ-mysql()
  "Shell of integ my sql"
    (interactive)  
    (eshell-command "pushd . & /ssh:root@sea5m1mysql1.mgt.integ.skytap.com: & shell integ-mysql & popd"))

(defun shell-puppetmaster (buffer-name)
  "Shell of puppermaster"
    (interactive "sBuffer name: puppetmaster-")  
    (eshell-command (format "pushd . & cd /ssh:highland@puppetmaster: & shell puppetmaster-%s & popd" buffer-name)))

(defun shell-mq (buffer-name)
  "Shell of mq"
    (interactive "sBuffer name: mq-")  
    (eshell-command (format "pushd . & cd /ssh:highland@mq1: & shell mq-%s & popd" buffer-name)))

(defun shell-jenkins (buffer-name)
  "Shell of jenkins"
    (interactive "sBuffer name: jenkins-")  
    (eshell-command (format "pushd . & cd /ssh:highland@jenkins:/highland/jenkins/jobs/hosting_platform/workspace & shell jenkins-%s & popd" buffer-name)))

(fset 'accounting-create-account
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("AccountingAPI.create_account(account_name='bx-account', environment='bxiao-dev', quotas={'svms.concurrent': 'unlimited', 'svms.cumulative': 'unlimited', 'storage_size.concurrent': 'unlimited', 'networks.concurrent': 'unlimited', 'vms.concurrent': 'unlimited', 'public_ips.concurrent': 'unlimited'})" 0 "%d")) arg)))

(fset 'accounting-delete-account
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("AccountingAPI.delete_account(account_name='bx-account')" 0 "%d")) arg)))

(fset 'accounting-create-charge-tag
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("AccountingAPI.create_charge_tag('bx-account', 'bx-chargetag')" 0 "%d")) arg)))

(fset 'greenbox-create-datacenter
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("GreenboxAPI.create_datacenter('bx-datacenter', 'ConfigurationManager', 'bxiao-dev', 'bx-account')" 0 "%d")) arg)))

(fset 'greenbox-delete-datacenter
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("GreenboxAPI.delete_datacenter('bx-datacenter')" 0 "%d")) arg)))

(fset 'greenbox-create-depot
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("GreenboxAPI.create_depot('bx-chargetag', 'bx-datacenter', 0, 'scratch', 0)" 0 "%d")) arg)))

(fset 'greenbox-delete-depot
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("GreenboxAPI.delete_depot('account_depot-')" 0 "%d")) arg)))

(fset 'greenbox-merge-configuration
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("GreenboxAPI.merge('bx-chargetag', 'bx-datacenter', 'configuration-11456', [], [], None, 'account_depot-', False, True, target_has_internet_disabled_flag=False)" 0 "%d")) arg)))

(fset 'greenbox-delete-configuration
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("GreenboxAPI.delete_configuration('configuration-')" 0 "%d")) arg)))

(fset 'greenbox-merge-vm
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("GreenboxAPI.merge('bx-chargetag', 'bx-datacenter', 'configuration-', ['configuration-39700'], [], None, 'account_depot-', False, True, target_has_internet_disabled_flag=False)" 0 "%d")) arg)))

(fset 'systemtest-cleanup
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("/opt/skytap/bin/skytap-cmd system_test_cleanup" 0 "%d")) arg)))

(fset 'systemtest-install
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("skycap svc:system_test:install_cron" 0 "%d")) arg)))

(fset 'systemtest-remove
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("skycap svc:system_test:remove_cron" 0 "%d")) arg)))

(fset 'systemtest-status
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("skycap svc:system_test:cron_status" 0 "%d")) arg)))

